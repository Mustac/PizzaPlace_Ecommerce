@using System.Reflection;
@inject ProductService ProductService
@inject IToastService ToastService
@inject IJSRuntime JsRuntime

@if (show)
{
    <div class="product-registration-modal">

        <div class="d-flex justify-content-between align-items-end mb-2">

            <h5 class="my-0 p-0">@(Product.Id == 0 ? "New Product" : "Edit Product")</h5>

            <div @onclick=Hide class="btn btn-secondary text-white btn-sm"><i class="fa-solid fa-x"></i></div>
        </div>
        <hr />
        @if (Product.Id != 0)
        {
            <EditForm Model="_product" OnValidSubmit="UpdateProductValidSubmit">
                <DataAnnotationsValidator />
                <div class="mt-3 py-1 px-2 rounded bg-info">
                    <div>
                        <input  id="input-checkbox" class="form-check-input border-dark" type="checkbox" @bind-value="enableEdit">
                        <label for="input-checkbox">Enable edit</label>
                    </div>
                    @if (enableEdit)
                    {
                        <label for="input-name" class="mt-2">Name :</label>
                        <InputText id="input-name" class="form-control my-1" @bind-Value="_product.Name"></InputText>
                        <ValidationMessage class="validation-error" For="(()=>_product.Name)"></ValidationMessage>

                        <label for="input-ingredients" class="mt-2">Ingredients :</label>
                        <InputTextArea id="input-ingredients" class="form-control my-1" @bind-Value="_product.Ingredients"></InputTextArea>
                        <ValidationMessage class="validation-error" For="(()=>_product.Ingredients)"></ValidationMessage>

                        <div class="mt-3 ">
                            <div class="d-flex my-1 align-items-center  ml-auto" style="width:150px;">
                                <div style="margin:0 10px 0 0">
                                    <label class="d-inline-block text-nowrap" for="input-price">Price : </label>
                                </div>
                                <InputNumber id="input-price" class="form-control" @bind-Value="_product.Price"></InputNumber>
                                <p style="margin-left:10px;">$</p>
                            </div>
                            <ValidationMessage class="validation-error text-end" For="(()=>_product.Price)"></ValidationMessage>
                        </div>
                    }
                </div>

                <div class="mt-2 py-1 px-2 rounded bg-info">
                    <div>
                        <input id="input-checkbox-promo" class="form-check-input border-dark" type="checkbox" checked="@enablePromo" @onchange="OnPromoChanged">
                        <label for="input-checkbox-promo">Enable promo</label>
                    </div>
                    @if (enablePromo)
                    {
                        <div class="d-flex">
                            <div style="width:50%; padding-right:5px;" >
                                <div class="mb-1">
                                    Current price :
                                </div> 
                                <div class="border border-dark border-3 rounded " style="background-color:lightgray; padding:6px;">
                                    @Product.Price$
                                </div>
                            </div>
                            <div style="width:50%; padding-left:5px;">
                                <label for="input-name">Discounted Price :</label>
                                <InputNumber id="input-name" class="form-control my-1" @bind-Value="_product.DiscountedPrice"></InputNumber>
                                <ValidationMessage class="validation-error" For="(()=>_product.DiscountedPrice)"></ValidationMessage>
                            </div>
                        </div>

                    }
                </div>
                

                <div class="mt-4 d-flex justify-content-between">
                    <button @onclick="Hide" type="button" class="btn btn-secondary text-white w-100 mx-1">Close</button>
                    <button type="submit" class="btn btn-primary w-100 mx-1">Update</button>
                </div>
            </EditForm>
           
        }
        else
        {

            <EditForm Model="Product" OnValidSubmit="NewProductValidSubmit">
                <DataAnnotationsValidator />
                <label for="input-name" class="mt-2">Name :</label>
                <InputText id="input-name" class="form-control my-1" @bind-Value="Product.Name"></InputText>
                <ValidationMessage class="validation-error" For="(()=>Product.Name)"></ValidationMessage>

                <label for="input-ingredients" class="mt-2">Ingredients :</label>
                <InputTextArea id="input-ingredients" class="form-control my-1" @bind-Value="Product.Ingredients"></InputTextArea>
                <ValidationMessage class="validation-error" For="(()=>Product.Ingredients)"></ValidationMessage>

                <div class="mt-3 ">
                    <div class="d-flex my-1 align-items-center  ml-auto" style="width:150px;">
                        <div style="margin:0 10px 0 0">
                            <label class="d-inline-block text-nowrap" for="input-price">Price : </label>
                        </div>
                        <InputNumber id="input-price" class="form-control" @bind-Value="Product.Price"></InputNumber>
                        <p style="margin-left:10px;">$</p>
                    </div>
                    <ValidationMessage class="validation-error text-end" For="(()=>Product.Price)"></ValidationMessage>
                </div>

                <div class="mt-4 d-flex justify-content-between">
                    <button @onclick="Hide" type="button" class="btn btn-secondary text-white w-100 mx-1">Close</button>
                    <button type="submit" class="btn btn-primary w-100 mx-1">Register</button>
                </div>
            </EditForm>
        }

    </div>

    <ShadowOverlay Show="true" />
}


@code {
    [Parameter]
    public ProductDTO? Product { get; set; } = new ProductDTO();

    private ProductDTO _product = new ProductDTO();

    private bool show;

    private bool enableEdit = false;
    private bool enablePromo = false;

    [Parameter]
    public EventCallback OnHide { get; set; }

    protected override void OnParametersSet()
    {
        if (Product is not null)
        {
            enablePromo = Product.DiscountedPrice > 0;
            _product = new ProductDTO
            {
                Id = Product.Id,
                DiscountedPrice = Product.DiscountedPrice,
                Ingredients = Product.Ingredients,
                Name = Product.Name,
                Price = Product.Price
            };
        }
    }

    private void OnPromoChanged(ChangeEventArgs e)
    {
        enablePromo = (bool)e.Value;

        if (!enablePromo)
        {
            Product.DiscountedPrice = 0;
        }
    }


    async Task NewProductValidSubmit()
    {

        var product = await ProductService.NewProductAsync(Product);

        if (product is not null)
        {
            ToastService.ShowSuccess($"{Product.Name} is registrated");
            Hide();
        }
        else
            ToastService.ShowError($"Something went wrong");

    }

    async Task UpdateProductValidSubmit()
    {
        if (!enablePromo)
            _product.DiscountedPrice = 0;

        string state = await ProductService.UpdateProductAsync(_product);

        if (state == State.Success)
        {
            ToastService.ShowSuccess("Success");
        }
        else if (state == State.Fail)
            ToastService.ShowError("Something went wrong");
        else if (state == State.NotFound)
            ToastService.ShowWarning("Product could not be found, try refreshing the page");

        Hide();
    }

    public void Show()
    {
        show = true;
        enableEdit = false;
        Product = new ProductDTO();
    }

    public void Hide()
    {
        show = false;
    }

   

}
