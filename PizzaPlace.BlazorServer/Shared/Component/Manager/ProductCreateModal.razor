@using AutoMapper;
@inject ProductService ProductService
@inject IToastService ToastService
@inject IMapper Mapper

@if (show)
{
    <div class="product-registration-modal">

        <div class="d-flex justify-content-between align-items-end mb-2">

            <h5 class="my-0 p-0">New Product</h5>

            <div @onclick=Hide class="btn btn-secondary text-white btn-sm"><i class="fa-solid fa-x"></i></div>
        </div>
        <hr />
        <EditForm Model="productInput" OnValidSubmit="CreateProductAsync">
            <DataAnnotationsValidator />
            <label for="input-name" class="mt-2">Name :</label>
            <InputText id="input-name" class="form-control my-1" @bind-Value="productInput.Name"></InputText>
            <ValidationMessage class="validation-error" For="(()=>productInput.Name)"></ValidationMessage>

            <label for="input-ingredients" class="mt-2">Ingredients :</label>
            <InputTextArea id="input-ingredients" class="form-control my-1" @bind-Value="productInput.Ingredients"></InputTextArea>
            <ValidationMessage class="validation-error" For="(()=>productInput.Ingredients)"></ValidationMessage>

            <div class="mt-3 ">
                <div class="d-flex my-1 align-items-center  ml-auto" style="width:150px;">
                    <div style="margin:0 10px 0 0">
                        <label class="d-inline-block text-nowrap" for="input-price">Price : </label>
                    </div>
                    <InputNumber id="input-price" class="form-control" @bind-Value="productInput.Price"></InputNumber>
                    <p style="margin-left:10px;">$</p>
                </div>
                <ValidationMessage class="validation-error text-end" For="(()=>productInput.Price)"></ValidationMessage>
            </div>
            <div class="mt-4 d-flex justify-content-between">
                <button @onclick="Hide" type="button" class="btn btn-secondary text-white w-100 mx-1">Close</button>
                <button type="submit" class="btn btn-primary w-100 mx-1">Register</button>
            </div>
        </EditForm>
    </div>

    <ShadowOverlay Show="true" />
}

@code {

    private ProductInputDTO productInput = new ProductInputDTO();

    private bool show;

    private bool enableEdit = false;

    [Parameter]
    public EventCallback OnComponentLoad { get; set; }

    [Parameter]
    public EventCallback<ProductDTO> OnProductCreated { get; set; }


    async Task CreateProductAsync()
    {
        ProductDTO product = Mapper.Map<ProductDTO>(productInput);
        var response = await ProductService.CreateProductAsync(product);

        if (response.Result != OperationResult.Ok)
            return;

        var productFromDB = Mapper.Map<ProductDTO>(response.Data);

        await OnProductCreated.InvokeAsync(productFromDB);

        Hide();
    }


    public async Task Show()
    {
        productInput = new ProductInputDTO();
        show = true;
        StateHasChanged();
        await OnComponentLoad.InvokeAsync();
    }

    public void Hide()
    {
        productInput = new ProductInputDTO();
        show = false;
    }


}
