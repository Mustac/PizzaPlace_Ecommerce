@inject ShoppingCartService ShoppingCartService
@implements IDisposable
@inject IToastService ToastService
@inject IJSRuntime JSRuntime
@inject ProductService ProductService
@inject GlobalService GlobalService


<div>
    @if (ShoppingCartService.ProductCart is null || ShoppingCartService.ProductCart.Count == 0)
    {
        <h5>Your cart is empty ...</h5>
    }
    else
    {
        @foreach (var product in ShoppingCartService.ProductCart)
        {
            @if (product.ProductNeedsDeletion)
            {
                <div class="order-item row bg-gray">
                    
                    <div class="col-12 d-flex justify-content-between px-0 pb-2 mb-1 border-bottom">
                        <h6 class="d-inline mb-0"><i class="fa-solid fa-pizza-slice"></i>&nbsp;@product.Name</h6>
                        
                    </div>
                    <div class="col-12 border-bottom pb-2">
                        <small><b>Ingridients:</b> @product.Ingredients</small>
                    </div>
                    <div class="col-12 bg-danger text-light fw-border rounded p-2">
                        <div class="d-flex justify-content-between align-items-center"><i class="fa-solid fa-triangle-exclamation"></i> <p class="text-center">This item has been changed or removed from the store</p> <i class="fa-solid fa-triangle-exclamation"></i></div>
                        <button @onclick="@(()=>ShoppingCartService.DeleteSingleProduct(product.Id))" class="btn btn-light form-control mt-2">Click to remove</button>
                    </div>
                </div>
            }
           @*  else if (product.ProductNeedsUpdate)
            {
                <div class="order-item row bg-gray">
                    <div class="col-12 d-flex justify-content-between px-0 pb-2 mb-1 border-bottom">
                        <h6 class="d-inline mb-0"><i class="fa-solid fa-pizza-slice"></i>&nbsp;@product.Name</h6>
                        <button @onclick="@(()=>ShoppingCartService.DeleteSingleProduct(product.Id))" class="btn-delete"><i class="fa-solid fa-trash"></i></button>
                    </div>
                    <div class="col-12 border-bottom pb-2">
                        <small><b>Ingridients:</b> @product.Ingredients</small>
                    </div>
                    <div class="col-12 bg-white rounded p-2 my-2">
                        <div class="text-center mb-2">This product is changed recently</div>

                        <button @onclick="@(()=>UpdateCartProduct(product))" class="btn btn-success form-control">Update Product Now</button>

                    </div>
                </div>
            } *@
            else
            {
                <div class="order-item row">
                    <div class="col-12 d-flex justify-content-between px-0 pb-2 mb-1 border-bottom">
                        <h6 class="d-inline mb-0"><i class="fa-solid fa-pizza-slice"></i>&nbsp;@product.Name</h6>
                        <button @onclick="@(()=>ShoppingCartService.DeleteSingleProduct(product.Id))" class="btn-delete"><i class="fa-solid fa-trash"></i></button>
                    </div>
                    <div class="col-12 border-bottom pb-2">
                        <small><b>Ingridients:</b> @product.Ingredients</small>
                    </div>
                    <div class="col-12 d-flex justify-content-between">
                        <div>
                            <button @onclick="@(()=>ModifyAmountAsync(product, false))" class="btn-adjustment">-</button>
                            <span>@product.Amount</span>
                            <button @onclick="@(()=>ModifyAmountAsync(product, true))" class="btn-adjustment">+</button>

                        </div>
                        <div>
                            @if (product.DiscountedPrice > 0)
                            {
                                <span class ="text-decoration-line-through" style="font-size:.7rem;">@product.Price$</span>
                                <span >@product.DiscountedPrice$</span>
                            }
                            else
                            {
                                <span>@product.Price$</span>
                            }

                        </div>
                    </div>
                </div>
            }
        }
        <div class="px-2">
            <div class="mt-3 text-secondary">Order Summary : <span class="float-end">@ShoppingCartService.TotalCartPrice.ToString("#.##") $</span></div>
            <div class="mt-1 text-secondary">Discounts : <span class="float-end">@(ShoppingCartService.TotalDiscounts == 0 ? 0 : ShoppingCartService.TotalDiscounts.ToString("#.##")) $</span></div>
            <h5 class="mt-2">Pay : <span class="float-end">@ShoppingCartService.TotalPriceWithDiscounts.ToString("#.##") $</span></h5>
        </div>
        <div class="py-1">
            <button class="btn btn-danger mt-2 d-block w-100 @(ShoppingCartService.ProductOrder.CanUserOrder?"":"disabled")"><i class="fa-solid fa-credit-card"></i>&nbsp;&nbsp;Order now</button>
        </div>
    }
</div>
@code {

    protected override void OnInitialized()
    {
        ShoppingCartService.OnShoppingCartChange += ReloadComponent;
        ShoppingCartService.OnAddToCartProductExist += ProductExist;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ShoppingCartService.ReloadShoppingCartListAsync();
        }
    }



    async Task ReloadComponent() =>
        await InvokeAsync(StateHasChanged);

    public void Dispose()
    {
        ShoppingCartService.OnShoppingCartChange -= ReloadComponent;
        ShoppingCartService.OnAddToCartProductExist -= ProductExist;
    }

    async Task ProductExist(ProductDTO product)
      => ToastService.ShowInfo($"{product.Name} is already in the cart");
 
    async Task ModifyAmountAsync(ProductCartDTO product, bool sumup)
    {
        if (sumup)
            product.Amount++;
        else
            product.Amount--;

        if (product.Amount <= 0)
        {
            await ShoppingCartService.DeleteSingleProduct(product.Id);
            return;
        }

        await ShoppingCartService.SaveShoppingCartToLocalStorageAsync();
    }


}
