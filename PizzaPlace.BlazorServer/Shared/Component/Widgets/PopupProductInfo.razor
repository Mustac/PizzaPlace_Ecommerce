@inject IJSRuntime JSRuntime
@inject ShoppingCartService ShoppingCartService
@inject NavMenuService NavMenuService

@if (Show && Product is not null)
{
    <div class="modal-popup p-3" style="max-width:300px;">
        <div @onclick="HidePopupAsync" style="position:absolute; right:16px; top:16px; cursor:pointer; z-index:1250;"><i class="fa-solid fa-rectangle-xmark fa-2x"></i></div>
       <div class="position-relative">
            <img src="/images/pizza_popup.png" class="img-fluid"/>
            <div class="pizza-overlay"><h4 class="text-center pt-2 text-primary">@Product.Name</h4></div>
       </div>
        <h6 class="text-primary my-0 py-0">Ingridients : </h6>
        <p class="m-1 pt-1" style="font-size:.8rem; padding-left:10px;">@Product.Ingredients</p>
        
            <div class="float-end" style="margin-right:10px;">
            @if (Product.DiscountedPrice > 0)
            {
                <small style="font-size:.7rem;" class="text-decoration-line-through text-secondary">@Product.Price$</small>
                <span class="fw-bold">@Product.DiscountedPrice$</span>
            }
            else
            {
                <span class="fw-bold">@Product.Price$</span>
            }
        </div>
       
        <button @onclick="AddToCart" style="display:block; width:100%; margin-top:38px;" class="btn btn-outline-primary">Add</button>
    </div>
}

<ShadowOverlay OnOverlayClick="HidePopupAsync" Show="Show" />

@code {
    [Parameter]
    public bool Show { get; set; }

    [Parameter]
    public EventCallback OnHideCallback { get; set; }

    [Parameter]
    public ProductDTO Product { get; set; } = new ProductDTO();

    async Task HidePopupAsync(){
        Show = false;
        await OnHideCallback.InvokeAsync();
    }

    async Task AddToCart()
    {
        Product.Amount = 1;
        var success = await ShoppingCartService.AddToShoppingCartAsync(Product);
        await ShoppingCartService.ReloadShoppingCartListAsync();

        if (success)
            await HidePopupAsync();
    }


}
