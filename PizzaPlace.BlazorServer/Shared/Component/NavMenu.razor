@inject IJSRuntime JS
@inject ShoppingCartService ShoppingCartService
@inject NavMenuService NavMenuService
@implements IDisposable

<nav class="sticky-top navbar navbar-expand-md bg-danger shadow-sm border-bottom border-white">
    <div class="container">
        <a class="navbar-brand text-light" href="#">Pizza Place</a>
        <div class="d-md-none ml-auto-icon">
            <div class="nav-icon-wrap">
                <i class="fa-solid fa-user text-white nav-icon"></i>
            </div>
            <div @onclick="ShoppingCartClick" class="nav-icon-wrap @(cartActive?"bg-white text-danger":"text-white")">
                <i class="fa-solid fa-cart-shopping  nav-icon"></i>
                <div class="notification text-white fw-bold">
                    <span class="notification-number">@ShoppingCartService.NumberOfProducts</span>
                </div>
            </div>
        </div>
        <button class="navbar-toggler bg-white show" @onclick="ToggleMenu" type="button">
            <span class="navbar-toggler-icon"></span>
        </button>

            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav" style="margin-left: auto;">
                    <li class="nav-item">
                        <NavLink Match="NavLinkMatch.All" class="nav-link mx-1" href="/">Home</NavLink>
                    </li>
                    <li class="nav-item">
                        <NavLink Match="NavLinkMatch.All" class="nav-link mx-1" href="/menu">Menu</NavLink>
                    </li>
                    <li class="nav-item">
                        <NavLink Match="NavLinkMatch.All" class="nav-link mx-1" href="/aboutus">About Us</NavLink>
                    </li>
                </ul>
            </div>

        <div class="d-none d-md-block">
            <div class="nav-icon-wrap ico">
                <i class="fa-solid fa-user text-white nav-icon"></i>
            </div>
            <div @onclick="ShoppingCartClick" class="nav-icon-wrap @(cartActive?"bg-white text-danger":"text-white")">
                <i class="fa-solid fa-cart-shopping  nav-icon"></i>
                <div class="notification text-white fw-bold">
                    <span class="notification-number">@ShoppingCartService.NumberOfProducts</span>
                </div>
            </div>
        </div>
    </div>
</nav>

@code {
    public bool navOpen = false;
    private bool cartActive = false;
    int cartNumberNotification = 0;

    public event Action<bool>? OnNavButtonClick;
    public event Action<bool>? OnCartButtonClick;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            OnNavButtonClick += NavMenuService.SetNavState;
            ShoppingCartService.OnReloadShoppingCart += ReloadComponent;
            await ShoppingCartService.RefreshShoppingCartAsync();
            StateHasChanged();
        }
    }

    async Task ReloadComponent() => await InvokeAsync(StateHasChanged);

    void UpdateUnseenCartProduct(int number )
    {
        cartNumberNotification = number;
        StateHasChanged();
    }

    private async Task ToggleMenu()
    {
        navOpen = !navOpen;

        if (navOpen)
        {
            NavMenuService.SetCartState(false);
            cartActive = NavMenuService.CartShow;
        }

        OnNavButtonClick?.Invoke(navOpen);
        await JS.InvokeVoidAsync("toggleNav", navOpen);
    }


    async void ShoppingCartClick()
    {
        cartActive = !cartActive;

        if (navOpen)
        {
            ToggleMenu();
        }

    NavMenuService.SetCartState(cartActive);

        

    }

    public void Dispose()
    {
        OnNavButtonClick -= NavMenuService.SetNavState;
        ShoppingCartService.OnReloadShoppingCart -= ReloadComponent;

    }

}