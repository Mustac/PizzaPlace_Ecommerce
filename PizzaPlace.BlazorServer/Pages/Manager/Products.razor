@page "/manager/products"
@page "/manager/products/{PageState}"
@layout ManagerLayout
@inject ProductService ProductService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IToastService ToastService
@inject ConfirmationModal ConfirmationModal
@inject GlobalService GlobalService
@implements IDisposable

<div class="container" style="min-width:1200px">
    <div class="d-flex justify-content-between">
        <div class="d-flex">
            <div @onclick="@(()=>NavigationManager.NavigateTo("/manager/products"))" class="btn-option-select @(_tabState == TabState.Products?"bg-primary":"bg-soft-gray") p-2">
                <h3 class="p-2 px-5 mb-0 text-white">Products</h3>
            </div>
            <div @onclick="@(()=>NavigationManager.NavigateTo("/manager/products/archived"))" class="p-2 btn-option-select  @(_tabState == TabState.Archived?"bg-primary":"bg-soft-gray") align-self-">
                <h3 class="p-1 text-white ml-2 mb-0">Archived</h3>
            </div>
        </div>
        @if(_tabState == TabState.Products)
        {
            <div class="align-self-end mb-2">
                <button class="btn btn-primary btn-sm" @onclick="@(()=>_productCreateModal.Show())">Register new product</button>
            </div>
        }
    </div>
    <div class="product-table bg-primary p-2">

        <table class="bg-white ">
            <thead>
                <tr id="table-header">
                    <th>Product Name</th>
                    <th>Price</th>
                    <th>Promo</th>
                    <th>Ingredients</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @if (products is not null)
                {
                    @foreach (var product in products)
                    {

                        <tr class="@(product.DiscountedPrice > 0?"bg-light-red fw-bold":"") @(product.Id == selectedProduct.Id?activeSelectedClass:"")">
                            <td><i class="fa-solid fa-pizza-slice"></i>&nbsp; @product.Name</td>
                            <td>@product.Price$</td>
                            <td>
                                @(product.DiscountedPrice == 0 ? "--" : product.DiscountedPrice.ToString("#.##") + "$")
                            </td>
                            <td>@product.Ingredients</td>
                           
                            @if(_tabState == TabState.Products)
                            {
                                <td class="text-center">
                                    <button data-toggle="tooltip" title="Edit Product" class="btn btn-sm btn-outline-dark mx-1" @onclick="@(()=>EditProduct(product))"><i class="fa-solid fa-pen-to-square"></i></button>
                                    <button data-toggle="tooltip" title="Archive Product" class="btn btn-sm btn-outline-dark mx-1" @onclick="@(()=>ArchiveProduct(product))"><i class="fa-solid fa-ban"></i></button>
                                </td>
                            }
                            
                            @if(_tabState == TabState.Archived)
                            {
                                <td class="text-center">
                                    <button data-toggle="tooltip" title="Restore Product" class="btn btn-sm btn-outline-dark" @onclick="@(()=>RestoreArchivedProduct(product))"><i class="fa-solid fa-trash-can-arrow-up mx-1"></i></button>
                                    <button data-toggle="tooltip" title="Edit Product" class="btn btn-sm btn-outline-dark" @onclick="@(()=>EditProduct(product))"><i class="fa-solid fa-pen-to-square mx-1"></i></button>
                                    <button data-toggle="tooltip" title="Delete Product" class="btn btn-sm btn-outline-dark" @onclick="@(()=>HardDeleteProductAsync(product))"><i class="fa-solid fa-trash mx-1"></i></button>
                                </td>
                            }
                        </tr>

                    }
                }
            </tbody>
        </table>
    </div>
</div>

<ProductCreateModal @ref="_productCreateModal" OnComponentLoad="@(()=>InvokeAsync(StateHasChanged))" OnProductCreated="ProductCreated"/>
<ProductUpdateModal @ref="_productUpdateModal" OnComponentLoad="@(()=>InvokeAsync(StateHasChanged))" />

@code {
    ProductCreateModal? _productCreateModal; 
    ProductUpdateModal? _productUpdateModal; 

    [Parameter]
    public string? PageState { get; set; }

    IEnumerable<ProductDTO>? products; // Collection of products to be displayed on the UI.

    private ProductDTO selectedProduct = new ProductDTO();  // Represents the currently selected product.

    TabState _tabState = TabState.Products; // Keeps track of the current tab state: Products or Archived.

    enum TabState{
        Products, // Represents the active products tab.
        Archived // Represents the archived products tab.
    }

    // CSS class for visually indicating the currently selected product in the UI.
    string activeSelectedClass = "border border-2 border-dark"; 

    protected async override Task OnParametersSetAsync()
    {
        if (PageState == "archived")
            _tabState = TabState.Archived;
        else
            _tabState = TabState.Products;

        await RefreshProducts();
    }

    ProductEventHandler? prodHandler;

    // Initializes the component by fetching active products, refreshing the product list in the UI,
    // and subscribing to product change events.
    protected override async Task OnInitializedAsync()
    {
        prodHandler = (prodDTO) => RefreshProducts();
        GlobalService.Product.OnProductChange += prodHandler;
    }

    // Handler to be called when a new product is created. It sets the created product as the selected one and refreshes the product list.
    async Task ProductCreated(ProductDTO product)
    {
        selectedProduct = product;
        await RefreshProducts();
        StateHasChanged();
    }

    // Retrieves and refreshes the product list based on the current tab state.
    async Task RefreshProducts()
    {
        OperationResponse<IEnumerable<ProductDTO>> operationResponse = null;

        if(_tabState == TabState.Products)
            operationResponse = await ProductService.GetAsync(ProductRange.ALlActive);
        else if(_tabState == TabState.Archived)
            operationResponse = await ProductService.GetAsync(ProductRange.Archived);

        if (operationResponse is not null && operationResponse.Result == OperationResult.Ok)
            products = operationResponse.Data;

        await InvokeAsync(StateHasChanged);
    }

    // Opens the product update modal and sets the given product as the selected one.
    async Task EditProduct(ProductDTO product)
    {
        selectedProduct = product;
        await _productUpdateModal.Show(product);
    }

    // Archives a given product after seeking user confirmation.
    async void ArchiveProduct(ProductDTO product)
    {
        var confirmation = await ConfirmationModal.ShowAsync($"Set {product.Name} to archive ?");

        if (!confirmation) 
            return;

        var response = await ProductService.ArchiveAsync(product.Id);

        if(response.Result == OperationResult.Ok)
            ToastService.ShowWarning($"{product.Name} has been moved to archive");

        else if (response.Result == OperationResult.NotFound)
            ToastService.ShowError($"Product could not be found, please refresh the page");
    }

    // Restores a given archived product and notifies the user about the operation result.
    async Task RestoreArchivedProduct(ProductDTO product)
    {
        var response = await ProductService.RestoreArchivedAsync(product.Id);

        if (response.Result == OperationResult.Ok)
            ToastService.ShowInfo($"{product.Name} has been restored");

        else if (response.Result == OperationResult.NotFound)
            ToastService.ShowError($"Product could not be found, please refresh the page");
    }

    // Permanently deletes a product in the "archived" state after seeking user confirmation.
    async Task HardDeleteProductAsync(ProductDTO product)
    {
        var confirmation = await ConfirmationModal.ShowAsync($"Are you sure you want to delete {product.Name}?");

        if (!confirmation)
            return;

        var response = await ProductService.DeleteAsync(product.Id);

        if (response.Result == OperationResult.Ok)
            ToastService.ShowSuccess($"{product.Name} has been removed");

        else if (response.Result == OperationResult.NotFound)
            ToastService.ShowError($"Product could not be found, please refresh the page");

    }

    // Switches between the Products and Archived tabs and refreshes the product list accordingly.
    async Task TabClicked(TabState state)
    {
        _tabState = state;
        await RefreshProducts();
    }

    // Cleanup: Unsubscribe from the product change events when the component is disposed.
    public void Dispose()
    {
        GlobalService.Product.OnProductChange -= prodHandler;
    }
}

