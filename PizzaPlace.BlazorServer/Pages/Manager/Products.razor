@page "/manager/products"
@layout ManagerLayout
@inject ProductService ProductService
@inject IJSRuntime JSRuntime

<div class="container">
    <div class="d-flex justify-content-between"
    <h1>Menu : </h1>
    <div>
        <button class="btn btn-primary btn-sm mt-3" @onclick="RegisterProduct">Register new product</button>
    </div>
    </div>
    <table >
        <thead class="text-dark">
            <tr>
                <th>Product Name</th>
                <th>Price</th>
                <th>Discounted Price</th>
                <th>Ingredients</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
        @if(products is not null)
        {
            @foreach(var product in products)
            {
                @if(product.DiscountedPrice == 0)
                {
                        <tr class=" @(product.Id == selectedProduct.Id?activeSelectedClass:"")">
                            <td><i class="fa-solid fa-pizza-slice"></i>&nbsp; @product.Name</td>
                        <td>@product.Price$</td>
                        <td>
                            <div>
                                No discount
                        </div>
                        </td>
                        <td>@product.Ingredients</td>
                      
                        <td>

                                <button class="btn btn-sm text-white" style="background-color:green" @onclick="@(()=>EditProduct(product))">Edit</button>
                        </td>
                    </tr>
                }
                else
                {
                        <tr class="bg-yellow fw-bold @(product.Id == selectedProduct.Id?activeSelectedClass:"")">
                            <td><i class="fa-solid fa-pizza-slice"></i>&nbsp; @product.Name</td>
                        <td>@product.Price$</td>
                        <td>@product.DiscountedPrice.ToString("#.##")$</td>
                        <td>@product.Ingredients</td>
                       
                        <td>

                            <button class="btn btn-sm text-white" style="background-color:green" @onclick="@(()=>EditProduct(product))">Edit</button>
                        </td>
                    </tr>
                }
        }
        }
            <!-- More rows as needed -->
        </tbody>
    </table>
</div>
    

<ProductRegistrationModal @ref="_productRegistrationModal" Product="productDTO" OnProductCreated="ProductCreated" OnProductUpdated="RefreshProducts" />

@code {
    IEnumerable<Product> products;
    private Product selectedProduct = new Product();

    string activeSelectedClass = "border border-2 border-dark";

    private ProductDTO productDTO
    {
        get
        {
            return
            selectedProduct is not null ?
            new ProductDTO
                {
                    Id = selectedProduct.Id,
                    Name = selectedProduct.Name,
                    DiscountedPrice = selectedProduct.DiscountedPrice,
                    Ingredients = selectedProduct.Ingredients,
                    Price = selectedProduct.Price
                }:
                new ProductDTO();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var temp = await ProductService.GetProductsAsync();
        products = await GetProductsAsync();
    }

    ProductRegistrationModal _productRegistrationModal;
    ProductRegistrationModal _productEditModal;

    async Task ProductCreated(Product product)
    {
        selectedProduct = product;
        await RefreshProducts();
        StateHasChanged();
    }

    async Task RefreshProducts() =>
        products = await GetProductsAsync();
    
        
    /// <summary>
    /// Called when we want to register a new product
    /// </summary>
    void RegisterProduct() => EditProduct(new Product());


    /// <summary>
    /// Called when we want to edit an existing product
    /// </summary>
    void EditProduct(Product product)
    {
        selectedProduct = product;
        _productRegistrationModal.Show();
    }

    void SelectProduct(Product product) => selectedProduct = product;

    async Task<IEnumerable<Product>> GetProductsAsync()
    {
        var temp = await ProductService.GetProductsAsync();
        return temp.OrderBy(p => p.DiscountedPrice == 0)
        .ThenBy(x => x.Name)
        .ToList();
    }




}

