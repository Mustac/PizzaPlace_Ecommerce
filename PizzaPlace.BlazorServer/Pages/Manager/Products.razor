@page "/manager/products"
@layout ManagerLayout
@inject ProductService ProductService
@inject IJSRuntime JSRuntime
@inject IToastService ToastService
@implements IDisposable

<div class="container" style="min-width:1200px">
    <div class="d-flex justify-content-between">
        <div class="d-flex">
            <div @onclick="@(()=>_pageState = PageState.Products)" class="btn-option-select @(_pageState == PageState.Products?"bg-primary":"bg-soft-gray") p-2">
                <h3 class="p-2 px-5 mb-0 text-white">Products</h3>
            </div>
            <div @onclick="@(()=>_pageState = PageState.Archived)" class="p-2 btn-option-select  @(_pageState == PageState.Archived?"bg-primary":"bg-soft-gray") align-self-">
                <h3 class="p-1 text-white ml-2 mb-0">Archived</h3>
            </div>
        </div>
        <div class="align-self-end mb-2">
            <button class="btn btn-primary btn-sm" @onclick="RegisterProduct">Register new product</button>
        </div>
    </div>
    <div class="product-table bg-primary p-2">

        <table class="bg-white ">
            <thead>
                <tr id="table-header">
                    <th>Product Name</th>
                    <th>Price</th>
                    <th>Discounted Price</th>
                    <th>Ingredients</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @if (products is not null)
                {
                    @foreach (var product in products)
                    {

                        <tr class="@(product.DiscountedPrice == 0?"":"bg-yellow fw-bold") @(product.Id == selectedProduct.Id?activeSelectedClass:"")">
                            <td><i class="fa-solid fa-pizza-slice"></i>&nbsp; @product.Name</td>
                            <td>@product.Price$</td>
                            <td>
                                @(product.DiscountedPrice == 0 ? "N/D" : product.DiscountedPrice.ToString("#.##"))
                            </td>
                            <td>@product.Ingredients</td>
                           

                            <td>

                                <button class="btn btn-sm text-white" style="background-color:green" @onclick="@(()=>EditProduct(product))">Edit</button>
                                <button class="btn btn-sm btn-danger" @onclick="@(()=>DeleteProductAsync(product.Id))">Archive</button>
                            </td>
                        </tr>

                    }
                }
                <!-- More rows as needed -->
            </tbody>
        </table>
    </div>
</div>


<ProductRegistrationModal @ref="_productRegistrationModal" Product="productDTO" />

@code {
    IEnumerable<Product> products;
    private Product selectedProduct = new Product();

    PageState _pageState = PageState.Products;

    enum PageState{
        Products,
        Archived
    }

    string activeSelectedClass = "border border-2 border-dark";

    private ProductDTO productDTO
    {
        get
        {
            return
            selectedProduct is not null ?
            new ProductDTO
                {
                    Id = selectedProduct.Id,
                    Name = selectedProduct.Name,
                    DiscountedPrice = selectedProduct.DiscountedPrice,
                    Ingredients = selectedProduct.Ingredients,
                    Price = selectedProduct.Price
                } :
                new ProductDTO();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var temp = await ProductService.GetProductsAsync();
        products = await GetProductsAsync();
        ProductService.OnProductAction += RefreshProducts;
    }

    ProductRegistrationModal _productRegistrationModal;
    ProductRegistrationModal _productEditModal;

    async Task ProductCreated(Product product)
    {
        selectedProduct = product;
        await RefreshProducts();
        StateHasChanged();
    }

    async Task RefreshProducts()
    {
        products = await GetProductsAsync();
        await InvokeAsync(StateHasChanged);
    }


    /// <summary>
    /// Called when we want to register a new product
    /// </summary>
    void RegisterProduct() => EditProduct(new Product());


    /// <summary>
    /// Called when we want to edit an existing product
    /// </summary>
    void EditProduct(Product product)
    {
        selectedProduct = product;
        _productRegistrationModal.Show();
    }

    void SelectProduct(Product product) => selectedProduct = product;

    async Task<IEnumerable<Product>> GetProductsAsync()
    {
        var temp = await ProductService.GetProductsAsync();
        return temp.OrderBy(p => p.DiscountedPrice == 0)
        .ThenBy(x => x.Name)
        .ToList();
    }

    async Task DeleteProductAsync(int Id)
    {
        bool success = await ProductService.SoftDeleteAsync(Id);

        if (success)
        {
            ToastService.ShowSuccess($"Product deleted");
            return;
        }

        ToastService.ShowError($"Something went wrong");
    }

    public void Dispose()
    {
        ProductService.OnProductAction -= RefreshProducts;
    }


}

