@page "/manager/products"
@layout ManagerLayout
@inject ProductService ProductService
@inject IJSRuntime JSRuntime
@inject IToastService ToastService
@inject ConfirmationModal ConfirmationModal
@inject GlobalEventService GlobalEventService
@implements IDisposable

<div class="container" style="min-width:1200px">
    <div class="d-flex justify-content-between">
        <div class="d-flex">
            <div @onclick="@(()=>TabClicked(TabState.Products))" class="btn-option-select @(_tabState == TabState.Products?"bg-primary":"bg-soft-gray") p-2">
                <h3 class="p-2 px-5 mb-0 text-white">Products</h3>
            </div>
            <div @onclick="@(()=>TabClicked(TabState.Archived))" class="p-2 btn-option-select  @(_tabState == TabState.Archived?"bg-primary":"bg-soft-gray") align-self-">
                <h3 class="p-1 text-white ml-2 mb-0">Archived</h3>
            </div>
        </div>
        @if(_tabState == TabState.Products)
        {
            <div class="align-self-end mb-2">
                <button class="btn btn-primary btn-sm" @onclick="RegisterProduct">Register new product</button>
            </div>
        }
    </div>
    <div class="product-table bg-primary p-2">

        <table class="bg-white ">
            <thead>
                <tr id="table-header">
                    <th>Product Name</th>
                    <th>Price</th>
                    <th>Discounted Price</th>
                    <th>Ingredients</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @if (products is not null)
                {
                    @foreach (var product in products)
                    {

                        <tr class="@(product.DiscountedPrice != 0 && _tabState == TabState.Products?"bg-yellow fw-bold":"") @(_tabState == TabState.Archived?"text-secondary":"") @(product.Id == selectedProduct.Id?activeSelectedClass:"")">
                            <td><i class="fa-solid fa-pizza-slice"></i>&nbsp; @product.Name</td>
                            <td>@product.Price$</td>
                            <td>
                                @(product.DiscountedPrice == 0 ? "N/D" : product.DiscountedPrice.ToString("#.##"))
                            </td>
                            <td>@product.Ingredients</td>
                           
                            @if(_tabState == TabState.Products)
                            {
                                <td class="text-center">
                                        <button class="btn btn-sm text-white" style="background-color:green" @onclick="@(()=>EditProduct(product))">Edit</button>
                                        <button class="btn btn-sm btn-danger" @onclick="@(()=>SoftDeleteProductAsync(product))">Archive</button>
                                </td>
                            }
                            
                            @if(_tabState == TabState.Archived)
                            {
                                <td class="text-center">
                                    <button class="btn btn-sm text-white" style="background-color:green" @onclick="@(()=>RestoreProduct(product))">Restore</button>
                                    <button class="btn btn-sm btn-danger" @onclick="@(()=>HardDeleteProductAsync(product))">Delete</button>
                                </td>
                            }
                        </tr>

                    }
                }
                <!-- More rows as needed -->
            </tbody>
        </table>
    </div>
</div>

<ProductRegistrationModal @ref="_productRegistrationModal" Product="productDTO" />

@code {
    IEnumerable<ProductDTO> products;
    private ProductDTO selectedProduct = new ProductDTO();

    TabState _tabState = TabState.Products;

    enum TabState{
        Products,
        Archived
    }

    string activeSelectedClass = "border border-2 border-dark";


    protected override async Task OnInitializedAsync()
    {
        var temp = await ProductService.GetAsync(ProductRange.Active);
        await RefreshProducts();
        GlobalEventService.OnProductChange += RefreshProducts;
    }

    ProductRegistrationModal _productRegistrationModal;
    ProductRegistrationModal _productEditModal;

    async Task ProductCreated(Product product)
    {
        await RefreshProducts();
        StateHasChanged();
    }

    async Task RefreshProducts()
    {
        OperationResponse<IEnumerable<ProductDTO>> operationResponse = null;

        if(_tabState == TabState.Products)
            operationResponse = await ProductService.GetAsync(ProductRange.Active);
        else if(_tabState == TabState.Archived)
            operationResponse = await ProductService.GetAsync(ProductRange.Archived);

        if (operationResponse is not null && operationResponse.Result == OperationResult.Ok)
            products = operationResponse.Data;

        await InvokeAsync(StateHasChanged);
    }


    /// <summary>
    /// Called when we want to register a new product
    /// </summary>
    void RegisterProduct() => EditProduct(new Product());


    /// <summary>
    /// Called when we want to edit an existing product
    /// </summary>
    void EditProduct(ProductDTO product)
    {
        selectedProduct = product;
        _productRegistrationModal.Show();
    }

    void SelectProduct(Product product) => selectedProduct = product;

    async Task SoftDeleteProductAsync(Product product) =>
        await ProductService.ArchiveAsync(product.Id);


    async Task TabClicked(TabState state)
    {
        _tabState = state;

        await RefreshProducts();

        StateHasChanged();
    }

    async Task RestoreProduct(Product product)
    {
        var success = await ProductService.RestoreProduct(product.Id);

        if (success == State.Success)
            ToastService.ShowSuccess($"{product.Name} restored");
    }

    async Task HardDeleteProductAsync(Product product)
    {
        var confirmation = await ConfirmationModal.ShowAsync($"Are you sure you want to delete {product.Name}?");

        if (!confirmation)
            return;

        var success = await ProductService.HardDeleteAsync(product.Id);

        if (success)
            ToastService.ShowSuccess($"{product.Name} hard deleted");
    }

    public void Dispose()
    {
        GlobalEventService.OnProductChange -= RefreshProducts;
    }


}

