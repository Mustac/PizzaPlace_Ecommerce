@page "/order"
@using System.Security.Claims
@inject ShoppingCartService ShoppingCartService
@inject AuthenticationStateProvider AuthStateProvider
@inject AccountService AccountService

<div class="order-item-wrapper">
    <div class="order-item">
        @if(stage == Stage.ModifyProducts)
        {
            <OrderList ButtonText="Next" OnButtonClick="OrderListNext"/>
        }
        else if(stage == Stage.SelectAddAddress)
        {
            <div>
                Products : 
                <ul class="pizza-list-item">
                    @foreach(var product in ShoppingCartService.ProductCart)
                    {
                        <li>
                            <div>
                                <div>@product.Name</div>
                                @if (product.DiscountedPrice > 0)
                                {
                                    <div><span class="text-secondary">@product.Amount X @product.DiscountedPrice</span>&nbsp;Nok</div>
                                }
                                else
                                {
                                    <div>@product.Amount X @product.Price&nbsp;Nok</div>
                                }
                            </div>
                        </li>
                    }
                    <li style="border-top:2px solid black;">
                        <div>
                            <div>Total : </div>
                            <div>@ShoppingCartService.TotalPriceWithDiscounts Nok</div>
                        </div>
                    </li>
                </ul>
                <h5 class="text-center mt-2 mb-3">Deliver to : </h5>
                <div>
                    @if(_addresses is not null && _addresses.Count() > 0)
                    {
                        @foreach(var address in _addresses)
                        {
                            <div class="alert alert-dark address" role="alert">
                                @address.Street, @address.Zip @address.City
                            </div>
                        }
                    }
                        <div>
                            <a>Create new Address</a>
                        </div>
                </div>
            </div>
        }
        

    </div>
</div>

@code {
    Stage stage = Stage.ModifyProducts;
    string userId = string.Empty;

    IEnumerable<AddressDTO> _addresses = new List<AddressDTO>();

    protected override async Task OnInitializedAsync()
    {
        var authstate = await AuthStateProvider.GetAuthenticationStateAsync();

        if (authstate is null || authstate.User is null || authstate.User.Claims is null)
            return;

        userId = authstate.User.Claims.FirstOrDefault(x=>x.Type == ClaimTypes.NameIdentifier).Value;
    }

    enum Stage
    {
        ModifyProducts,
        SelectAddAddress,
        Payement
    }

    async Task OrderListNext()
    {
        stage = Stage.SelectAddAddress;
        await GetAddressAsync();
    }

    async Task GetAddressAsync()
    {
        var response = await AccountService.GetAddressAsync(userId);

        if (response.Result == OperationResult.Ok)
            _addresses = response.Data;

    }
}
