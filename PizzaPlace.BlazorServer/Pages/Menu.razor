@implements IDisposable
@inject ProductService ProductService
@inject GlobalService GlobalService
@page "/menu"

<div class="hero-image " style="background:url('images/pizza_menu.jpg'); background-size:cover; height:200px; background-position:center;">
    <div class="shade"></div>
    <!--
    <div class="order-flow-wrapper shadow rounded p-3">
        <h3>Speciality of the day : </h3>
        <h6>Mushroom Manor Delight</h6>
        <p>Ingridients : <b>mushroom</b>, <b>cherry tomato</b>, <b>champignon</b></p>
    </div>
    -->
</div>


<div class="container py-4 ">
    <h2 class="text-danger">Promotion : </h2>
    <div class="row px-5">
        <ProductList Products="promoList" />
    </div>
    <h2 class="text-danger">MENU : </h2>
    <div class="row px-5">
        <ProductList Products="fullPriceList" />
    </div>
</div>

@code {
    IEnumerable<ProductDTO> promoList = new List<ProductDTO>();
    IEnumerable<ProductDTO> fullPriceList = new List<ProductDTO>();


    protected override async Task OnInitializedAsync()
    {
        GlobalService.Product.OnProductChange += Refresh;

        await Refresh(default);
    }

    async Task Refresh(ProductDTO product)
    {
        var responsePromo = await ProductService.GetAsync(ProductRange.Discounted);
        var responseFulLPrice = await ProductService.GetAsync(ProductRange.FullPrice);


        if (responsePromo.Result == OperationResult.Ok)
            promoList = responsePromo.Data;

        if (responseFulLPrice.Result == OperationResult.Ok)
            fullPriceList = responseFulLPrice.Data;
    }


   public void Dispose()
    {
        GlobalService.Product.OnProductChange -= Refresh;
    }
}
