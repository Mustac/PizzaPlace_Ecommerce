@page "/account"
@using System.Security.Claims;
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager NavigationManager
@inject AccountService AccountService

<AuthorizeView>
    <Authorized>


        <div class="container mb-5">
            <div class="row mt-5  justify-content-center">
                <div class="col-12 col-md-3">
                    <h1 class="mb-4">User Profile : </h1>
                </div>
            </div>
            <div class="row justify-content-center">
                <div class="col-12 col-md-3">
                    <img src="/images/blank-profile-picture.png" class="img-fluid border-1 border border-secondary p-2 rounded shadow" alt="blank-profile-picture.png" />
                </div>
                <div class="col-12 col-md-6 mt-5 mt-md-0">
                    <table class="user-info">
                        <tr>
                            <td>Name : </td>
                            <td> @User.FirstName </td>
                        </tr>
                        <tr>
                            <td>Last Name : </td>
                            <td> @User.LastName </td>
                        </tr>
                        <tr>
                            <td>Email :</td>
                            <td>@User.UserName</td>

                        </tr>
                        <tr>
                            <td>Phone :</td>
                            <td>@User.PhoneNumber </td>
                        </tr>
                        <tr>
                            <td>Address :</td>
                            <td style="font-size:0.9rem;">
                                @if (User.Addresses is not null)
                                {
                                    @foreach (var add in User.Addresses)
                                    {
                                        <div class="border border-0 border-bottom border-dark">@add.Street, @add.Zip @add.City</div>
                                    }
                                }
                            </td>
                        </tr>
                        <tr>
                            <td>Position :</td>
                            <td>@context.User?.FindFirst(ClaimTypes.Role).Value</td>
                        </tr>
                    </table>

                </div>
                <div class="col-12 col-md-8 mt-4">
                    <h4 class="mb-4">Order History : </h4>
                    @foreach (var order in orders)
                    {
                        <div class="border-1 border rounded border-dark mt-3">
                            <div class="card-order-item @( GetStatusClass(order.OrderStatus))">
                                <div>Date : @(order.TimeOrdered.ToShortDateString()) Price : @order.DiscountedPrice.ToString("#.##")$</div>
                                <div>Order Status : <span>@order.OrderStatus</span></div>
                            </div>
                            @if(order.OrderProducts is not null)
                            {
                                @foreach(var orderItem in order.OrderProducts)
                                {
                                    <div class="px-5 py-1">
                                        <div class="d-flex justify-content-between border border-0 border-bottom border-dark">
                                            <div>@orderItem.Product.Name<span class="text-danger"> x @orderItem.Quantity</span></div>
                                            <div class="float-end">@(orderItem.Price*orderItem.Quantity)</div>
                                        </div>
                                    </div>
                                }
                            }
                            @if(OrderStatus.Delivered != order.OrderStatus)
                            {
                                <PizzaStatus PizzaOrderStatus="order.OrderStatus" />
                            }

                        </div>
                    }
                </div>
                <div class="col-12 col-md-8 mt-4">
                    <a href="/identity/account/logout" class="btn btn-outline-danger d-block">Logout</a>

                </div>

            </div>
        </div>


    </Authorized>
</AuthorizeView>

@code {
    ApplicationUser User = new ApplicationUser();
    IEnumerable<Order> orders = new List<Order>();


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();

        if (authState is null || authState.User is null || authState.User.Claims is null)
            NavigationManager.NavigateTo("/", true);

        var userId = authState.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier).Value;

        var response = await AccountService.GetUserAsync(userId);

        if (response.Result != OperationResult.Ok)
            NavigationManager.NavigateTo("/identity/account/logout", true);

        User = response.Data;

        var orderResult = await AccountService.GetUserOrders(userId, 0, 10);

        if (orderResult.Result != OperationResult.Ok)
            return;

        orders = orderResult.Data;
    }


    string GetStatusClass(OrderStatus orderStatus)
     => orderStatus switch
     {
         OrderStatus.Pending => "status-pending",
         OrderStatus.Baking => "status-processing",
         OrderStatus.Delivery => "status-shipped",
         OrderStatus.Delivered => "status-delivered",
         _ => "status-unknown"
     };
}
